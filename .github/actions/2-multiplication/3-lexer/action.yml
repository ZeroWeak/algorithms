name: 'Docker Deploy Action'

description: >
  ðŸª‚  A Github Action to deploy pages conveniently

branding:
  icon: 'command'
  color: 'green'

inputs:
  id:
    description: The deploy id
    required: false
  hub_username:
    description: Username for Docker Hub
    default: ${{ github.actor }}       
    required: true
  hub_password:
    description: Docker Hub authentication token
    required: true
  hub_token:
    description: Docker Hub authentication token
    required: true
  action_path:
    description: Path to the dockerfile from which to build the image
    required: true
  credentials:
    description: 'The gcloud credentials'
    required: true
  image_name:
    description: Tag to use for the new image
    default: ${{ github.action_repository }}
    required: true
  dockerfile_path:
    description: Path to the dockerfile from which to build the image
    required: true
  initiate_pauli_sum:
    description: Build args
    required: false
    default: ""
  docker_hub_repo_short_description:
    description: Short description text for the docker hub repo
    required: true
  docker_hub_repo_readme_file_path:
    description: |
      Path of the md file which will be used as the docker hub repo readme
    required: true
  cache_src:
    description: Path for the docker cache source
    required: false
    default: /tmp/.buildx-cache
  cache_dest:
    description: Path for the docker cache destination
    required: false
    default: /tmp/.buildx-cache-new
  provider:
    description: 'The deploy provider'
    required: true
  config:
    description: The config of secrets variables
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  repository:
    description: 'The deploy repository'
    default: ${{ github.repository }}
    required: false

outputs:
  describe:
    description: Collect describe outputs
    value: ${{ steps.describe.outputs.ip }}
  compute:
    description: Collect compute outputs
    value: ${{ steps.describe.outputs.function }}

runs:
  using: composite
  steps:
    - name: configure
      if: runner.os == 'Windows'
      shell: bash
      env:
        CXX: g++-12
        CC: gcc-12
        FC: gfortran-12      
      run: |
        mkdir ${{ inputs.action_path }}/build
        cd ${{ inputs.action_path }}/build
        echo "GSL prefix: $(brew --prefix gsl)"
        echo "Content of GSL prefix:"
        ls $(brew --prefix gsl)
        export PATH=$PATH:/usr/local/bin
        export CPATH=$CPATH:/usr/local/include:$(brew --prefix gsl)/include
        export C_INCLUDE_PATH=$C_INCLUDE_PATH:/usr/local/include:$(brew --prefix gsl)/include
        export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib:$(brew --prefix gsl)/lib
        export DYLD_FALLBACK_LIBRARY_PATH=$DYLD_FALLBACK_LIBRARY_PATH:/usr/local/lib:$(brew --prefix gsl)/lib
        cmake .. -DQt5_DIR=$(brew --prefix qt5)/lib/cmake/Qt5 -DCMAKE_PREFIX_PATH=$(brew --prefix qt5)/lib/cmake
        make && sudo make install && ctest --output-on-failure

    #Ref: https://gist.github.com/xtrmstep/92aab2d465e348ce1c07ed903ca0dfb8
    - id: describe
      if: runner.os == 'Windows'
      shell: bash
      #env:
        #CONFIG_JSON: ${{ inputs.config }}
      run: |
        #echo -n "$CONFIG_JSON" > config.json
        cd ${{ inputs.action_path }} && doxygen > /dev/null 2>&1
        rm -rf ${{ github.workspace }}/xml && mv -f xml ${{ github.workspace }}/

        cd ${{ github.workspace }} && rm -rf cloud-config
        git add . && git commit --allow-empty -m "${{ env.LATEST_COMMIT }}" && git push

        #ssh-keygen -t rsa -b 3072 -N '' -f $HOME/.ssh/google_compute_engine -C root
        #sed -i.backup "1s|^|runner: |" $HOME/.ssh/google_compute_engine.pub && gh secret set GCP_ID_RSA < $HOME/.ssh/google_compute_engine

        # Ref: https://console.cloud.google.com/security/secret-manager?hl=en&project=feedmapping
        #gcloud secrets describe freqtrade-config || \
          #gcloud secrets create freqtrade-config --data-file=config.json
        #gcloud secrets versions add freqtrade-config --data-file=config.json

        gcloud compute instances add-metadata grid-${{ env.IMAGE_TAG }} --zone=us-central1-a \
          --metadata=startup-script=/home/runner/work/_actions/eq19/eq19/v1/.github/entrypoint/startup.sh

        #gcloud compute instances describe grid-${{ env.IMAGE_TAG }} --zone=us-central1-a --format='value(metadata.items)'
        #gcloud compute scp ${{ github.workspace }}/.github/entrypoint/artifact/python/manual_v2.ipynb grid-${{ env.IMAGE_TAG }}:/home/runner/.docker --zone=us-central1-a

        echo $(gcloud compute instances describe grid-${{ env.IMAGE_TAG }} --zone=us-central1-a --format json) > instance
        echo 'ip='$(gcloud compute instances describe grid-${{ env.IMAGE_TAG }} --zone=us-central1-a --format='value(networkInterfaces.accessConfigs[0].natIP)') >> ${GITHUB_OUTPUT}
        echo 'function='$(curl -s -X POST https://us-central1-feedmapping.cloudfunctions.net/function -H "Authorization: Bearer $(gcloud auth print-identity-token)" -H "Content-Type: application/json" --data @instance | base64) >> ${GITHUB_OUTPUT}

    #Ref: https://blog.benoitblanchon.fr/github-action-run-ssh-commands/
    - name: Configure SSH
      if: runner.os == 'Windows'
      id: compute
      shell: bash
      env:
        IP: ${{ steps.describe.outputs.ip }}
      run: |
        #localedef -i en_US -f UTF-8 en_US.UTF-8
        ssh-keyscan -t rsa $IP >> $HOME/.ssh/known_hosts
        chmod 600 $HOME/.ssh/id_rsa
        cat << EOL >> $HOME/.ssh/config
        Host staging
          HostName $IP
          User runner
          IdentityFile $HOME/.ssh/id_rsa
          StrictHostKeyChecking no
        EOL
        #Ref: https://github.com/cloudkite-io/google-container-optimized-os-tools
        ssh staging 'sudo whoami && \
          sudo echo ${{ steps.setup_runner.outputs.function }} > /home/runner/.ssh/function.json && \
          sudo chown root:root /home/runner/.ssh/*.json && sudo mv -f /home/runner/.ssh/*.json /home/runner/.docker/'
        if [ $? -eq 0 ]; then
          ssh staging 'sudo ls -alR /home/runner'
        else
          exit 1
        fi
