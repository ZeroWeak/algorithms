name: 'Docker Deploy Action'

description: >
  ðŸª‚  A Github Action to deploy pages conveniently

branding:
  icon: 'command'
  color: 'red'

inputs:
  id:
    description: The deploy id
    required: false
  hub_username:
    description: Username for Docker Hub
    default: ${{ github.actor }}       
    required: true
  hub_password:
    description: Docker Hub authentication token
    required: true
  hub_token:
    description: Docker Hub authentication token
    required: true
  action_path:
    description: Path to the dockerfile from which to build the image
    required: true
  credentials:
    description: 'The gcloud credentials'
    required: true
  image_name:
    description: Tag to use for the new image
    default: ${{ github.action_repository }}
    required: true
  dockerfile_path:
    description: Path to the dockerfile from which to build the image
    required: true
  initiate_pauli_sum:
    description: Build args
    required: false
    default: ""
  docker_hub_repo_short_description:
    description: Short description text for the docker hub repo
    required: true
  docker_hub_repo_readme_file_path:
    description: |
      Path of the md file which will be used as the docker hub repo readme
    required: true
  cache_src:
    description: Path for the docker cache source
    required: false
    default: /tmp/.buildx-cache
  cache_dest:
    description: Path for the docker cache destination
    required: false
    default: /tmp/.buildx-cache-new
  provider:
    description: 'The deploy provider'
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  repository:
    description: 'The deploy repository'
    default: ${{ github.repository }}
    required: false

outputs:
  artifact:
    description: Collect artifact outputs
    value: ${{ toJSON(steps.artifact.outputs.repo) }}
  set_output:
    description: Collect set_output outputs
    value: ${{ toJSON(steps.set_output.outputs) }}

runs:
  using: composite
  steps:
    - name: ðŸ’Ž Set ID Token
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'id_token'
        create_credentials_file: false
        credentials_json: ${{ inputs.credentials }}
        id_token_audience: 'https://us-central1-feedmapping.cloudfunctions.net/function'

    - name: ðŸ’Ž Set Artifact
      id: artifact
      shell: bash
      env:
        TMP: ${{ inputs.tmp }}
        RUN: ${{ github.run_id }}
        USER: ${{ github.actor }}
        #TOKEN: ${{ inputs.token }}
        REPO: ${{ github.repository }}
        ACTOR: ${{ github.triggering_actor }}
        OWNER: ${{ github.repository_owner }}
        BEARER: ${{ steps.auth.outputs.id_token }}
      run: |      
        shopt -s dotglob
        rm -rf ${{ inputs.action_path }}/.git

        mv -f ${{ inputs.action_path }}/_config.yml ${RUNNER_TEMP}/
        export PATH=$GITHUB_WORKSPACE/.github/entrypoint:$PATH && artifact.sh

        mv -f ${RUNNER_TEMP}/.env ${{ inputs.action_path }}/
        mv -f ${RUNNER_TEMP}/_config.yml ${{ inputs.action_path }}/
 
        mkdir -p ${{ inputs.action_path }}/_data
        mv -f ${RUNNER_TEMP}/*.json ${{ inputs.action_path }}/_data/

        mv -f ${{ inputs.action_path }} ${{ github.workspace }}/_site
        mkdir -p ${{ inputs.action_path }} && cp -R ${{ github.workspace }}/_site/. ${{ inputs.action_path }}/

    - uses: ikalnytskyi/action-setup-postgres@v7
      id: postgres
      with:
        username: yoda
        password: GrandMaster
        database: jedi_order
        port: 34837
        postgres-version: "17"
        ssl: true

    - name: ðŸª‚ Test postgres
      env:
        CONNECTION_URI: ${{ steps.postgres.outputs.connection-uri }}
        SERVICE_NAME: ${{ steps.postgres.outputs.service-name }}
        CERTIFICATE_PATH: ${{ steps.postgres.outputs.certificate-path }}
        EXPECTED_CONNECTION_URI: postgresql://yoda:GrandMaster@localhost:34837/jedi_order?sslmode=verify-ca&sslrootcert=${{ steps.postgres.outputs.certificate-path }}
        EXPECTED_SERVICE_NAME: yoda
        EXPECTED_SERVER_VERSION: 17
        EXPECTED_SSL: true
      shell: bash
      run: |
        #cd /home/runner/work/_actions/eq19/eq19/v1/integrations/tensorflow
        #pip install -e python_projects/* && iree-import-tflite -h && iree-import-tf -h

        #cd /home/runner/work/_actions/eq19/eq19/v1/integrations/pjrt
        #pip install -e ctstools python_packages/iree_cpu_plugin
  
        #pip install -r requirements.txt && cd python_packages/iree_cpu_plugin/build/cmake && ninja
        #JAX_PLATFORMS=iree-cpu pytest -n4 --max-worker-restart=9999 -p openxla_pjrt_artifacts --openxla-pjrt-artifact-dir=/tmp/foobar test/test_simple.py

        cp ${{ github.workspace }}/.github/entrypoint/test.py . && python3 -m pytest -vv test.py

    - name: ðŸš€ Initiate Feed Container
      if: runner.os != 'Windows'
      uses: devcontainers/ci@v0.3
      id: set_output
      with:
        push: always
        runCmd: ls -al /
        imageTag: spin-${{ env.ID }}
        skipContainerUserIdUpdate: true
        imageName: ${{ inputs.image_name }}
        configFile: ${{ github.workspace }}/_site/.devcontainer.json

    - name: ðŸª‚ Remove existing images
      id: variables
      shell: bash
      run: |
        BASE_NAME=$(basename ${{ inputs.image_name }})
        IFS=', '; array=($(curl -L -s 'https://registry.hub.docker.com/v2/repositories/${{ inputs.image_name }}/tags?page_size=1024' | jq -rc '."results"[]["name"]' | yq eval -P | sed "s/ /, /g")) 
        for ((i=0; i < ${#array[@]}; i++)); do
          if [[ "${array[$i]}" != "latest" ]]; then
            HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ inputs.hub_username }}\", \"password\": \"${{ inputs.hub_password }}\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
            curl -s -i -X DELETE -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/namespaces/${{ inputs.hub_username }}/repositories/$BASE_NAME/tags/${array[$i]}
            echo "deleted: ${{ inputs.image_name }}:${array[$i]}"
          fi
        done
